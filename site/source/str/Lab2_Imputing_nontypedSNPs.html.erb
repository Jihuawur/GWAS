
<style type="text/css">
.main-container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}
code {
  color: inherit;
  background-color: rgba(0, 0, 0, 0.04);
}
img { 
  max-width:100%; 
  height: auto; 
}
</style>
<div class="container-fluid main-container">




<div id="new-data-generation---imputing-non-typed-snps" class="section level2">
<h2>New data generation - Imputing non-typed SNPs</h2>
<p>(This lab was adapted for statsTeachR by Tu Dao, Nicholas Reich and Andrea Foulkes from the GWAS tutorial written by Reed et al.)</p>
<p>Typed SNPs measured using chip array technology typically capture about 1 million polymorphisms that vary in at least 1% of the general population. More generally, interest lies in analyzing association of genotypes of non-typed SNPs with disease outcomes because functional (causal) variants may not be measured. In this lab, we will demonstrate how to impute impute SNPs on chromosome 16.</p>
<div id="getting-started" class="section level3">
<h3>Getting started</h3>
<p>In addition to the genotyped SNPs from our study, it is useful to extend the analysis to other known SNPs, that were not typed or were removed by SNP level filtering. In this example, we impute SNPs on chromosome 16. Performance of genotype imputation requires reference data, which has typed genotypes at the SNPs of interest from a similar homogeneous sample. Sources for this data include HapMap and 1000 Genomes.</p>
<p>To prepare for imputing non-typed SNPs, we need to load the data saved from last module and read in 1000G data for chromosome 16. To do this, we will read in the genotype data from the .ped and .info files using the read.pedfile() function in snpStats. Note, that the .info file is similar to the .map file we’ve discussed previously, and the .ped file is very large (150 Mb) and thus will take longer to download. In addition, notice that we are using a different method for obtaining the files from the web. Please install package downloader to be able to download the 1000G files to your workspace.</p>
<p>Once we have the data read in, we use the which argument to specify the column in the .info file with the SNP IDs. Then we proceed to obtain genotype data for the given chromosome and each SNPs position.</p>
<pre class="r"><code>load(&quot;m2_lab1_save.RData&quot;)
library(snpStats)
library(downloader)
info &lt;- download(&quot;https://www.mtholyoke.edu/courses/afoulkes/Data/statsTeachR/chr16_1000g_CEU.info&quot;, 
    destfile = &quot;chr16_1000g_CEU.info&quot;)
ped &lt;- download(&quot;https://www.mtholyoke.edu/courses/afoulkes/Data/statsTeachR/chr16_1000g_CEU.ped&quot;, 
    destfile = &quot;chr16_1000g_CEU.ped&quot;)
thougeno &lt;- read.pedfile(&quot;chr16_1000g_CEU.ped&quot;, snps = &quot;chr16_1000g_CEU.info&quot;, 
    which = 1)
genoMatrix &lt;- thougeno$genotypes
support &lt;- thougeno$map
colnames(support) &lt;- c(&quot;SNP&quot;, &quot;position&quot;, &quot;A1&quot;, &quot;A2&quot;)
head(support)</code></pre>
<pre><code>##           SNP position A1 A2
## 1 rs140769322    60180  3  2
## 2 rs188810967    60288  2  1
## 3  rs76368850    60291  2  4
## 4 rs185537431    60778  3  1
## 5 rs542544747    60842  2  1
## 6   rs4021615    61349  1  3</code></pre>
</div>
<div id="imputing-non-typed-snps" class="section level3">
<h3>Imputing non-typed SNPs</h3>
<p>After obtaining the genotype data and the location of the SNPs from the reference panel, we can impute the non-typed SNPs on chromosome 16 by determining the subset of SNPs that are in 1000G but not in our data. We do this by subsetting our data for chromosome 16 and then creating “missing” and “present” snpMatrix objects. Both are needed for imputation rules step of the algorithm. The “present” matrix holds our typed SNPs, while the “missing” matrix holds the SNPs that need to be imputed.</p>
<pre class="r"><code>presSnps &lt;- colnames(genotype)
presSnps &lt;- colnames(genotype)
presDatChr &lt;- genoBim[genoBim$SNP %in% presSnps &amp; genoBim$chr == 16, ]
targetSnps &lt;- presDatChr$SNP
is.present &lt;- colnames(genoMatrix) %in% targetSnps
missing &lt;- genoMatrix[, !is.present]
print(missing)</code></pre>
<pre><code>## A SnpMatrix with  99 rows and  398196 columns
## Row names:  CEU_1 ... CEU_99 
## Col names:  rs140769322 ... rs111706106</code></pre>
<pre class="r"><code>present &lt;- genoMatrix[, is.present]
print(present)</code></pre>
<pre><code>## A SnpMatrix with  99 rows and  255 columns
## Row names:  CEU_1 ... CEU_99 
## Col names:  rs2074365 ... rs11117303</code></pre>
<p>After subsetting our typed SNPs for the given chromosome, we need to acquire their positions to be used for imputation rules. We derive these “rules” for the additional SNPs that were not typed in our study using the snp.imputation function. In other words, we are using the genotypes from the 1000G data to fill in the gaps in our data. Each rule represents a predictive model for genotypes of un-typed SNPs associated with near-by typed SNPs.</p>
<pre class="r"><code>pos.pres &lt;- support$position[is.present]
pos.miss &lt;- support$position[!is.present]
rules &lt;- snp.imputation(present, missing, pos.pres, pos.miss)</code></pre>
<pre><code>## SNPs tagged by a single SNP: 58412
## SNPs tagged by multiple tag haplotypes (saturated model): 158818</code></pre>
<pre class="r"><code>rules &lt;- rules[can.impute(rules)]
cat(&quot;Imputation rules for&quot;, length(rules), &quot;SNPs were estimated\n&quot;) </code></pre>
<pre><code>## Imputation rules for 217230 SNPs were estimated</code></pre>
<div id="exercise" class="section level4">
<h4>Exercise</h4>
<p>Why would we want to impute non-typed SNPs?</p>
<p>In the last step we remove un-typed SNPs that we fail to derive imputation “rules” for. We also filter out the SNPs that have low estimated minor allele frequency (MAF), and low imputation accuracy. The latter is based on the R^2 value of the model estimated by the snp.imputation function. The end results are expected posterior values of the un-typed SNPs.</p>
<pre class="r"><code># Quality control for imputation certainty and MAF
r2threshold &lt;- 0.7
minor &lt;- 0.01
rules &lt;- rules[imputation.r2(rules) &gt;= r2threshold]
cat(length(rules),&quot;imputation rules remain after uncertain imputations were removed\n&quot;)  </code></pre>
<pre><code>## 10718 imputation rules remain after uncertain imputations were removed</code></pre>
<pre class="r"><code>rules &lt;- rules[imputation.maf(rules) &gt;= minor]
cat(length(rules),&quot;imputation rules remain after MAF filtering\n&quot;) </code></pre>
<pre><code>## 10718 imputation rules remain after MAF filtering</code></pre>
<pre class="r"><code># Obtain posterior expectation of genotypes of imputed snps
target &lt;- genotype[,targetSnps]
imputed &lt;- impute.snps(rules, target, as.numeric=FALSE)
print(imputed)  </code></pre>
<pre><code>## A SnpMatrix with  1396 rows and  10718 columns
## Row names:  10002 ... 11596 
## Col names:  rs118004149 ... rs72817441</code></pre>
</div>
<div id="exercise-1" class="section level4">
<h4>Exercise</h4>
<p>We set R^2 value in this example to be 0.7. Define R^2 value and interpret the R^2 threshold is this case.</p>
</div>
</div>
<div id="saving-work-for-following-labs" class="section level3">
<h3>Saving work for following labs…</h3>
<p>Before saving the data, we want to remove the data we created in this lab to open up memory. You can do this and save the necessary data from this lab by running the following commands:</p>
<pre class="r"><code>rm(genoMatrix)
rm(missing)
rm(present)
save(genotype, genoBim, clinical, pcs, imputed, target, rules, support, file=&quot;m2_lab2_save.RData&quot;)</code></pre>
</div>
<div id="on-your-own" class="section level3">
<h3>On your own</h3>
<p>Using the exercise_dat.Rdata</p>
<ol style="list-style-type: decimal">
<li>Calculate and store imputation rules using snp.imputation()</li>
<li>Impute un-typed SNPs. Use an R^2 value of 0.85 and MAF of 0.05.</li>
<li>Explain in your own words why we need a reference panel like 1000 Genomes to impute our SNPs? Why can’t we just use the SNPs we have to determine imputation rules?</li>
</ol>
</div>
</div>


</div>

<script>

// add bootstrap table styles to pandoc tables
$(document).ready(function () {
  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');
});

</script>

<!-- dynamically load mathjax for compatibility with self-contained -->
<script>
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
</script>

